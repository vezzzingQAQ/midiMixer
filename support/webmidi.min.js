!function(exports){"use strict";class EventEmitter{constructor(eventsSuspended=!1){this.eventMap={},this.eventsSuspended=1==eventsSuspended}addListener(event,callback,options={}){if("string"==typeof event&&event.length<1||event instanceof String&&event.length<1||"string"!=typeof event&&!(event instanceof String)&&event!==EventEmitter.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if("function"!=typeof callback)throw new TypeError("The callback must be a function.");const listener=new Listener(event,this,callback,options);return this.eventMap[event]||(this.eventMap[event]=[]),options.prepend?this.eventMap[event].unshift(listener):this.eventMap[event].push(listener),listener}addOneTimeListener(event,callback,options={}){options.remaining=1,this.addListener(event,callback,options)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(event,callback){if(void 0===event)return!!(this.eventMap[EventEmitter.ANY_EVENT]&&this.eventMap[EventEmitter.ANY_EVENT].length>0)||Object.entries(this.eventMap).some(([,value])=>value.length>0);if(this.eventMap[event]&&this.eventMap[event].length>0){if(callback instanceof Listener){let result;return this.eventMap[event].filter(listener=>listener===callback).length>0}if("function"==typeof callback){let result;return this.eventMap[event].filter(listener=>listener.callback===callback).length>0}return null==callback}return!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(event){return this.eventMap[event]||[]}suspendEvent(event){this.getListeners(event).forEach(listener=>{listener.suspended=!0})}unsuspendEvent(event){this.getListeners(event).forEach(listener=>{listener.suspended=!1})}getListenerCount(event){return this.getListeners(event).length}emit(event,...args){if("string"!=typeof event&&!(event instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let results=[],listeners=this.eventMap[EventEmitter.ANY_EVENT]||[];return this.eventMap[event]&&(listeners=listeners.concat(this.eventMap[event])),listeners.forEach(listener=>{if(listener.suspended)return;let params=[...args];Array.isArray(listener.arguments)&&(params=params.concat(listener.arguments)),listener.remaining>0&&(results.push(listener.callback.apply(listener.context,params)),listener.count++),--listener.remaining<1&&listener.remove()}),results}removeListener(event,callback,options={}){if(void 0===event)return void(this.eventMap={});if(!this.eventMap[event])return;let listeners=this.eventMap[event].filter(listener=>callback&&listener.callback!==callback||options.remaining&&options.remaining!==listener.remaining||options.context&&options.context!==listener.context);listeners.length?this.eventMap[event]=listeners:delete this.eventMap[event]}async waitFor(event,options={}){return options.duration=parseInt(options.duration),(isNaN(options.duration)||options.duration<=0)&&(options.duration=1/0),new Promise((resolve,reject)=>{let timeout,listener=this.addListener(event,()=>{clearTimeout(timeout),resolve()},{remaining:1});options.duration!==1/0&&(timeout=setTimeout(()=>{listener.remove(),reject("The duration expired before the event was emitted.")},options.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class Listener{constructor(event,target,callback,options={}){if("string"!=typeof event&&!(event instanceof String)&&event!==EventEmitter.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!target)throw new ReferenceError("The 'target' parameter is mandatory.");if("function"!=typeof callback)throw new TypeError("The 'callback' must be a function.");void 0===options.arguments||Array.isArray(options.arguments)||(options.arguments=[options.arguments]),(options=Object.assign({context:target,remaining:1/0,arguments:void 0,duration:1/0},options)).duration!==1/0&&setTimeout(()=>this.remove(),options.duration),this.arguments=options.arguments,this.callback=callback,this.context=options.context,this.count=0,this.event=event,this.remaining=parseInt(options.remaining)>=1?parseInt(options.remaining):1/0,this.suspended=!1,this.target=target}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}
/**
     * The `Enumerations` class contains enumerations and arrays of elements used throughout the
     * library. All properties are static and should be referenced using the class name. For example:
     * `Enumerations.MIDI_CHANNEL_MESSAGES`.
     *
     * @license Apache-2.0
     * @since 3.0.0
     */class Enumerations{static get MIDI_CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get MIDI_CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CONTROL_CHANGE_MESSAGES(){return{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-databuttonincrement","rpn-databuttondecrement"]}}
/**
     * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
     *
     * `Note` objects can be played back on a single channel by calling
     * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
     * output, by calling [`Output.playNote()`]{@link Output#playNote}.
     *
     * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
     * These can be changed by passing in the appropriate option. It is also possible to set a
     * system-wide default for attack and release velocities by using the
     * [`WebMidi.defaults`](WebMidi#defaults) property.
     *
     * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
     * [`rawRelease`](#rawRelease) to both get and set the values.
     *
     * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
     * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
     * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
     * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
     * [`Output.stopNote()`]{@link Output#stopNote} or similar.
     *
     * @license Apache-2.0
     * @since 3.0.0
     */class Note{constructor(value,options={}){this.duration=wm.defaults.note.duration,this.attack=wm.defaults.note.attack,this.release=wm.defaults.note.release,null!=options.duration&&(this.duration=options.duration),null!=options.attack&&(this.attack=options.attack),null!=options.rawAttack&&(this.attack=Utilities.from7bitToFloat(options.rawAttack)),null!=options.release&&(this.release=options.release),null!=options.rawRelease&&(this.release=Utilities.from7bitToFloat(options.rawRelease)),Number.isInteger(value)?this.identifier=Utilities.toNoteIdentifier(value):this.identifier=value}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(value){const fragments=Utilities.getNoteDetails(value);if(wm.validation&&!value)throw new Error("Invalid note identifier");this._name=fragments.name,this._accidental=fragments.accidental,this._octave=fragments.octave}get name(){return this._name}set name(value){if(wm.validation&&(value=value.toUpperCase(),!["C","D","E","F","G","A","B"].includes(value)))throw new Error("Invalid name value");this._name=value}get accidental(){return this._accidental}set accidental(value){if(wm.validation&&(value=value.toLowerCase(),!["#","##","b","bb"].includes(value)))throw new Error("Invalid accidental value");this._accidental=value}get octave(){return this._octave}set octave(value){if(wm.validation&&(value=parseInt(value),isNaN(value)))throw new Error("Invalid octave value");this._octave=value}get duration(){return this._duration}set duration(value){if(wm.validation&&(value=parseFloat(value),isNaN(value)||null===value||value<0))throw new RangeError("Invalid duration value.");this._duration=value}get attack(){return this._attack}set attack(value){if(wm.validation&&(value=parseFloat(value),isNaN(value)||!(value>=0&&value<=1)))throw new RangeError("Invalid attack value.");this._attack=value}get release(){return this._release}set release(value){if(wm.validation&&(value=parseFloat(value),isNaN(value)||!(value>=0&&value<=1)))throw new RangeError("Invalid release value.");this._release=value}get rawAttack(){return Utilities.fromFloatTo7Bit(this._attack)}set rawAttack(value){this._attack=Utilities.from7bitToFloat(value)}get rawRelease(){return Utilities.fromFloatTo7Bit(this._release)}set rawRelease(value){this._release=Utilities.from7bitToFloat(value)}get number(){return Utilities.toNoteNumber(this.identifier)}getOffsetNumber(octaveOffset=0,semitoneOffset=0){return wm.validation&&(octaveOffset=parseInt(octaveOffset)||0,semitoneOffset=parseInt(semitoneOffset)||0),Math.min(Math.max(this.number+12*octaveOffset+semitoneOffset,0),127)}}
/**
     * The `Utilities` class contains general-purpose utility methods. All methods are static and
     * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
     *
     * @license Apache-2.0
     * @since 3.0.0
     */class Utilities{
/**
       * Returns a MIDI note number matching the identifier passed in the form of a string. The
       * identifier must include the octave number. The identifier also optionally include a sharp (#),
       * a double sharp (##), a flat (b) or a double flat (bb) symbol. For example, these are all valid
       * identifiers: C5, G4, D#-1, F0, Gb7, Eb-1, Abb4, B##6, etc.
       *
       * When converting note identifiers to numbers, C4 is considered to be middle C (MIDI note number
       * 60) as per the scientific pitch notation standard.
       *
       * The resulting note number can be offset by using the `octaveOffset` parameter.
       *
       * @param identifier {string} The identifier in the form of a letter, followed by an optional "#",
       * "##", "b" or "bb" followed by the octave number. For exemple: C5, G4, D#-1, F0, Gb7, Eb-1,
       * Abb4, B##6, etc.
       *
       * @param {number} [octaveOffset=0] A integer to offset the octave by.
       *
       * @returns {number} The MIDI note number (an integer between 0 and 127).
       *
       * @throws RangeError Invalid 'octaveOffset' value
       *
       * @throws TypeError Invalid note identifier
       *
       * @license Apache-2.0
       * @since 3.0.0
       * @static
       */
static toNoteNumber(identifier,octaveOffset=0){if(octaveOffset=null==octaveOffset?0:parseInt(octaveOffset),isNaN(octaveOffset))throw new RangeError("Invalid 'octaveOffset' value");"string"!=typeof identifier&&(identifier="");const fragments=this.getNoteDetails(identifier);if(!fragments)throw new TypeError("Invalid note identifier");const notes={C:0,D:2,E:4,F:5,G:7,A:9,B:11};let result=12*(fragments.octave+1+octaveOffset);if(result+=notes[fragments.name],fragments.accidental&&(fragments.accidental.startsWith("b")?result-=fragments.accidental.length:result+=fragments.accidental.length),result<0||result>127)throw new RangeError("Invalid octaveOffset value");return result}static getNoteDetails(value){Number.isInteger(value)&&(value=this.toNoteIdentifier(value));const matches=value.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!matches)throw new TypeError("Invalid note identifier");const name=matches[1].toUpperCase(),octave=parseInt(matches[3]);let accidental=matches[2].toLowerCase();accidental=""===accidental?void 0:accidental;const fragments={accidental:accidental,identifier:name+(accidental||"")+octave,name:name,octave:octave};return fragments}static sanitizeChannels(channel){let channels;if(this.validation)if("all"===channel)channels=["all"];else if("none"===channel)return[];return channels=Array.isArray(channel)?channel:[channel],channels.indexOf("all")>-1&&(channels=Enumerations.MIDI_CHANNEL_NUMBERS),channels.map((function(ch){return parseInt(ch)})).filter((function(ch){return ch>=1&&ch<=16}))}static toTimestamp(time){let value=!1;const parsed=parseFloat(time);return!isNaN(parsed)&&("string"==typeof time&&"+"===time.substring(0,1)?parsed>=0&&(value=wm.time+parsed):parsed>=0&&(value=parsed),value)}static guessNoteNumber(input,octaveOffset){octaveOffset=parseInt(octaveOffset)||0;let output=!1;if(Number.isInteger(input)&&input>=0&&input<=127)output=parseInt(input);else if(parseInt(input)>=0&&parseInt(input)<=127)output=parseInt(input);else if("string"==typeof input||input instanceof String)try{output=this.toNoteNumber(input.trim(),octaveOffset)}catch(e){return!1}return output}static toNoteIdentifier(number,octaveOffset){if(number=parseInt(number),isNaN(number)||number<0||number>127)throw new RangeError("Invalid note number");if(octaveOffset=null==octaveOffset?0:parseInt(octaveOffset),isNaN(octaveOffset))throw new RangeError("Invalid octaveOffset value");const notes=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],octave=Math.floor(number/12-1)+octaveOffset;return notes[number%12]+octave.toString()}static buildNote(input,options={}){if(options.octaveOffset=parseInt(options.octaveOffset)||0,input instanceof Note)return input;let number=this.guessNoteNumber(input,options.octaveOffset);if(!1===number)throw new TypeError(`The input could not be parsed as a note ()`);return options.octaveOffset=void 0,new Note(number,options)}static buildNoteArray(notes,options={}){let result=[];return Array.isArray(notes)||(notes=[notes]),notes.forEach(note=>{result.push(this.buildNote(note,options))}),result}static from7bitToFloat(value){return value===1/0&&(value=127),value=parseInt(value)||0,Math.min(Math.max(value/127,0),1)}static fromFloatTo7Bit(value){return value===1/0&&(value=1),value=parseFloat(value)||0,Math.min(Math.max(Math.round(127*value),0),127)}static fromMsbLsbToFloat(msb,lsb=0){wm.validation&&(msb=Math.min(Math.max(parseInt(msb)||0,0),127),lsb=Math.min(Math.max(parseInt(lsb)||0,0),127));const value=((msb<<7)+lsb)/16383;return Math.min(Math.max(value,0),1)}static fromFloatToMsbLsb(value){wm.validation&&(value=Math.min(Math.max(parseFloat(value)||0,0),1));const multiplied=Math.round(16383*value);return{msb:multiplied>>7,lsb:127&multiplied}}static offsetNumber(number,octaveOffset=0,semitoneOffset=0){if(wm.validation){if(number=parseInt(number),isNaN(number))throw new Error("Invalid note number");octaveOffset=parseInt(octaveOffset)||0,semitoneOffset=parseInt(semitoneOffset)||0}return Math.min(Math.max(number+12*octaveOffset+semitoneOffset,0),127)}static getPropertyByValue(object,value){return Object.keys(object).find(key=>object[key]===value)}static getCcNameByNumber(number){return Utilities.getPropertyByValue(Enumerations.MIDI_CONTROL_CHANGE_MESSAGES,number)}static getChannelModeByNumber(number){if(!(number>=120&&number<=127))return!1;for(let cm in Enumerations.MIDI_CHANNEL_MODE_MESSAGES)if(Enumerations.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(cm)&&number===Enumerations.MIDI_CHANNEL_MODE_MESSAGES[cm])return cm;return!1}static get isNode(){return"undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node}static get isBrowser(){return"undefined"!=typeof window&&void 0!==window.document}}
/**
     * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
     * provided by an [`Output`](Output) port which, itself, is made available by a device. The
     * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
     * directly.
     *
     * All 16 `OutputChannel` objects can be found inside the parent output's
     * [`channels`]{@link Output#channels} property.
     *
     * @param {Output} output The [`Output`](Output) this channel belongs to.
     * @param {number} number The MIDI channel number (`1` - `16`).
     *
     * @extends EventEmitter
     * @license Apache-2.0
     * @since 3.0.0
     */class OutputChannel extends EventEmitter{constructor(output,number){super(),this._output=output,this._number=number,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(message,options={time:0}){return this.output.send(message,options),this}sendKeyAftertouch(target,pressure,options={}){if(wm.validation){if(options.useRawValue&&(options.rawValue=options.useRawValue),isNaN(parseFloat(pressure)))throw new RangeError("Invalid key aftertouch value.");if(options.rawValue){if(!(pressure>=0&&pressure<=127&&Number.isInteger(pressure)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(pressure>=0&&pressure<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}options.rawValue||(pressure=Utilities.fromFloatTo7Bit(pressure));const offset=wm.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(target)||(target=[target]),Utilities.buildNoteArray(target).forEach(n=>{this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),n.getOffsetNumber(offset),pressure],{time:Utilities.toTimestamp(options.time)})}),this}
/**
       * Sends a MIDI **control change** message to the channel at the scheduled time. The control
       * change message to send can be specified numerically (`0` to `127`) or by using one of the
       * following common names:
       *
       * | Number | Name                          |
       * |--------|-------------------------------|
       * | 0      |`bankselectcoarse`             |
       * | 1      |`modulationwheelcoarse`        |
       * | 2      |`breathcontrollercoarse`       |
       * | 4      |`footcontrollercoarse`         |
       * | 5      |`portamentotimecoarse`         |
       * | 6      |`dataentrycoarse`              |
       * | 7      |`volumecoarse`                 |
       * | 8      |`balancecoarse`                |
       * | 10     |`pancoarse`                    |
       * | 11     |`expressioncoarse`             |
       * | 12     |`effectcontrol1coarse`         |
       * | 13     |`effectcontrol2coarse`         |
       * | 18     |`generalpurposeslider3`        |
       * | 19     |`generalpurposeslider4`        |
       * | 32     |`bankselectfine`               |
       * | 33     |`modulationwheelfine`          |
       * | 34     |`breathcontrollerfine`         |
       * | 36     |`footcontrollerfine`           |
       * | 37     |`portamentotimefine`           |
       * | 38     |`dataentryfine`                |
       * | 39     |`volumefine`                   |
       * | 40     |`balancefine`                  |
       * | 42     |`panfine`                      |
       * | 43     |`expressionfine`               |
       * | 44     |`effectcontrol1fine`           |
       * | 45     |`effectcontrol2fine`           |
       * | 64     |`holdpedal`                    |
       * | 65     |`portamento`                   |
       * | 66     |`sustenutopedal`               |
       * | 67     |`softpedal`                    |
       * | 68     |`legatopedal`                  |
       * | 69     |`hold2pedal`                   |
       * | 70     |`soundvariation`               |
       * | 71     |`resonance`                    |
       * | 72     |`soundreleasetime`             |
       * | 73     |`soundattacktime`              |
       * | 74     |`brightness`                   |
       * | 75     |`soundcontrol6`                |
       * | 76     |`soundcontrol7`                |
       * | 77     |`soundcontrol8`                |
       * | 78     |`soundcontrol9`                |
       * | 79     |`soundcontrol10`               |
       * | 80     |`generalpurposebutton1`        |
       * | 81     |`generalpurposebutton2`        |
       * | 82     |`generalpurposebutton3`        |
       * | 83     |`generalpurposebutton4`        |
       * | 91     |`reverblevel`                  |
       * | 92     |`tremololevel`                 |
       * | 93     |`choruslevel`                  |
       * | 94     |`celestelevel`                 |
       * | 95     |`phaserlevel`                  |
       * | 96     |`databuttonincrement`          |
       * | 97     |`databuttondecrement`          |
       * | 98     |`nonregisteredparametercoarse` |
       * | 99     |`nonregisteredparameterfine`   |
       * | 100    |`registeredparametercoarse`    |
       * | 101    |`registeredparameterfine`      |
       * | 120    |`allsoundoff`                  |
       * | 121    |`resetallcontrollers`          |
       * | 122    |`localcontrol`                 |
       * | 123    |`allnotesoff`                  |
       * | 124    |`omnimodeoff`                  |
       * | 125    |`omnimodeon`                   |
       * | 126    |`monomodeon`                   |
       * | 127    |`polymodeon`                   |
       *
       * As you can see above, not all control change message have a matching name. This does not mean
       * you cannot use the others. It simply means you will need to use their number
       * (`0` to `127`) instead of their name. While you can still use them, numbers `120` to `127` are
       * usually reserved for *channel mode* messages. See
       * [`sendChannelMode()`]{@link OutputChannel#sendChannelMode} method for more info.
       *
       * To view a detailed list of all available **control change** messages, please consult "Table 3 -
       * Control Change Messages" from the [MIDI Messages](
       * https://www.midi.org/specifications/item/table-3-control-change-messages-data-bytes-2)
       * specification.
       *
       * **Note**: messages #0-31 (MSB) are paired with messages #32-63 (LSB). For example, message #1
       * (`modulationwheelcoarse`) can be accompanied by a second control change message for
       * `modulationwheelfine` to achieve a greater level of precision. if you want to specify both MSB
       * and LSB for messages between `0` and `31`, you can do so by passing a 2-value array as the
       * second parameter.
       *
       * @param {number|string} controller The MIDI controller name or number (`0` - `127`).
       *
       * @param {number|number[]} value The value to send (0-127). You can also use a two-position array
       * for controllers 0 to 31. In this scenario, the first value will be sent as usual and the second
       * value will be sent to the matching LSB controller (which is obtained by adding 32 to the first
       * controller)
       *
       * @param {object} [options={}]
       *
       * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
       * followed by a number, the message will be delayed by that many milliseconds. If the value is a
       * positive number
       * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
       * the operation will be scheduled for that time. The current time can be retrieved with
       * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
       * operation will be carried out as soon as possible.
       *
       * @throws {RangeError} Controller numbers must be between 0 and 127.
       * @throws {RangeError} Invalid controller name.
       * @throws {TypeError} The value array must have a length of 2.
       *
       * @returns {OutputChannel} Returns the `OutputChannel` object so methods can be chained.
       *
       * @license Apache-2.0
       * @since 3.0.0
       */sendControlChange(controller,value,options={}){if("string"==typeof controller&&(controller=Enumerations.MIDI_CONTROL_CHANGE_MESSAGES[controller]),Array.isArray(value)||(value=[value]),wm.validation){if(void 0===controller)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(controller)||!(controller>=0&&controller<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if(2===(value=value.map(item=>{const output=Math.min(Math.max(parseInt(item),0),127);if(isNaN(output))throw new TypeError("Values must be integers between 0 and 127");return output})).length&&controller>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return value.forEach((item,index)=>{this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),controller+32*index,value[index]],{time:Utilities.toTimestamp(options.time)})}),this}_selectNonRegisteredParameter(parameter,options={}){return this.sendControlChange(99,parameter[0],options),this.sendControlChange(98,parameter[1],options),this}_deselectRegisteredParameter(options={}){return this.sendControlChange(101,127,options),this.sendControlChange(100,127,options),this}_deselectNonRegisteredParameter(options={}){return this.sendControlChange(101,127,options),this.sendControlChange(100,127,options),this}_selectRegisteredParameter(parameter,options={}){return this.sendControlChange(101,parameter[0],options),this.sendControlChange(100,parameter[1],options),this}_setCurrentParameter(data,options={}){return data=[].concat(data),this.sendControlChange(6,data[0],options),data.length<2?this:(this.sendControlChange(38,data[1],options),this)}sendRpnDecrement(parameter,options={}){if(Array.isArray(parameter)||(parameter=Enumerations.MIDI_REGISTERED_PARAMETERS[parameter]),wm.validation){if(void 0===parameter)throw new TypeError("The specified registered parameter is invalid.");let valid=!1;if(Object.getOwnPropertyNames(Enumerations.MIDI_REGISTERED_PARAMETERS).forEach(p=>{Enumerations.MIDI_REGISTERED_PARAMETERS[p][0]===parameter[0]&&Enumerations.MIDI_REGISTERED_PARAMETERS[p][1]===parameter[1]&&(valid=!0)}),!valid)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(parameter,options),this.sendControlChange(97,0,options),this._deselectRegisteredParameter(options),this}sendRpnIncrement(parameter,options={}){if(Array.isArray(parameter)||(parameter=Enumerations.MIDI_REGISTERED_PARAMETERS[parameter]),wm.validation){if(void 0===parameter)throw new TypeError("The specified registered parameter is invalid.");let valid=!1;if(Object.getOwnPropertyNames(Enumerations.MIDI_REGISTERED_PARAMETERS).forEach(p=>{Enumerations.MIDI_REGISTERED_PARAMETERS[p][0]===parameter[0]&&Enumerations.MIDI_REGISTERED_PARAMETERS[p][1]===parameter[1]&&(valid=!0)}),!valid)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(parameter,options),this.sendControlChange(96,0,options),this._deselectRegisteredParameter(options),this}playNote(note,options={}){if(this.sendNoteOn(note,options),options.duration>0&&isFinite(String(options.duration).trim()||NaN)){let noteOffOptions={time:(Utilities.toTimestamp(options.time)||wm.time)+options.duration,release:options.release,rawRelease:options.rawRelease};this.sendNoteOff(note,noteOffOptions)}return this}sendNoteOff(note,options={}){if(wm.validation){if(null!=options.rawRelease&&!(options.rawRelease>=0&&options.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(null!=options.release&&!(options.release>=0&&options.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");options.rawVelocity&&(options.rawRelease=options.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),options.velocity&&(options.release=options.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let nVelocity=64;null!=options.rawRelease?nVelocity=options.rawRelease:isNaN(options.release)||(nVelocity=Math.round(127*options.release));const offset=wm.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Utilities.buildNoteArray(note,{rawRelease:parseInt(nVelocity)}).forEach(n=>{this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),n.getOffsetNumber(offset),n.rawRelease],{time:Utilities.toTimestamp(options.time)})}),this}stopNote(note,options={}){return this.sendNoteOff(note,options)}sendNoteOn(note,options={}){if(wm.validation){if(null!=options.rawAttack&&!(options.rawAttack>=0&&options.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(null!=options.attack&&!(options.attack>=0&&options.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");options.rawVelocity&&(options.rawAttack=options.velocity,options.rawRelease=options.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),options.velocity&&(options.attack=options.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let nVelocity=64;null!=options.rawAttack?nVelocity=options.rawAttack:isNaN(options.attack)||(nVelocity=Math.round(127*options.attack));const offset=wm.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Utilities.buildNoteArray(note,{rawAttack:nVelocity}).forEach(n=>{this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.noteon<<4)+(this.number-1),n.getOffsetNumber(offset),n.rawAttack],{time:Utilities.toTimestamp(options.time)})}),this}sendChannelMode(command,value=0,options={}){if("string"==typeof command&&(command=Enumerations.MIDI_CHANNEL_MODE_MESSAGES[command]),wm.validation){if(void 0===command)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(command)||!(command>=120&&command<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(value))||value<0||value>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),command,value],{time:Utilities.toTimestamp(options.time)}),this}sendOmniMode(state,options={}){return void 0===state||state?this.sendChannelMode("omnimodeon",0,options):this.sendChannelMode("omnimodeoff",0,options),this}sendChannelAftertouch(pressure,options={}){if(wm.validation){if(isNaN(parseFloat(pressure)))throw new RangeError("Invalid channel aftertouch value.");if(options.rawValue){if(!(pressure>=0&&pressure<=127&&Number.isInteger(pressure)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(pressure>=0&&pressure<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(127*pressure)],{time:Utilities.toTimestamp(options.time)}),this}sendMasterTuning(value,options={}){if(value=parseFloat(value)||0,wm.validation&&!(value>-65&&value<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let coarse=Math.floor(value)+64,fine=value-Math.floor(value);fine=Math.round((fine+1)/2*16383);let msb=fine>>7&127,lsb=127&fine;return this.sendRpnValue("channelcoarsetuning",coarse,options),this.sendRpnValue("channelfinetuning",[msb,lsb],options),this}sendModulationRange(semitones,cents,options={}){if(wm.validation){if(!Number.isInteger(semitones)||!(semitones>=0&&semitones<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!(null==cents||Number.isInteger(cents)&&cents>=0&&cents<=127))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return cents>=0&&cents<=127||(cents=0),this.sendRpnValue("modulationrange",[semitones,cents],options),this}sendNrpnValue(nrpn,data,options={}){if(data=[].concat(data),wm.validation){if(!Array.isArray(nrpn)||!Number.isInteger(nrpn[0])||!Number.isInteger(nrpn[1]))throw new TypeError("The specified NRPN is invalid.");if(!(nrpn[0]>=0&&nrpn[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(nrpn[1]>=0&&nrpn[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");data.forEach(value=>{if(!(value>=0&&value<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")})}return this._selectNonRegisteredParameter(nrpn,options),this._setCurrentParameter(data,options),this._deselectNonRegisteredParameter(options),this}sendPitchBend(value,options={}){if(wm.validation)if(options.rawValue&&Array.isArray(value)){if(!(value[0]>=0&&value[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(value[1]>=0&&value[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(options.rawValue&&!Array.isArray(value)){if(!(value>=0&&value<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(value)||null===value)throw new RangeError("Invalid pitch bend value.");if(!(value>=-1&&value<=1))throw new RangeError("The pitch bend value must be a float between -1 and 1.")}let msb=0,lsb=0;if(options.rawValue&&Array.isArray(value))msb=value[0],lsb=value[1];else if(options.rawValue&&!Array.isArray(value))msb=value;else{const result=Utilities.fromFloatToMsbLsb((value+1)/2);msb=result.msb,lsb=result.lsb}return this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),lsb,msb],{time:Utilities.toTimestamp(options.time)}),this}sendPitchBendRange(semitones,cents,options={}){if(wm.validation){if(!Number.isInteger(semitones)||!(semitones>=0&&semitones<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(cents)||!(cents>=0&&cents<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[semitones,cents],options),this}sendProgramChange(program,options={}){if(program=parseInt(program)||0,wm.validation&&!(program>=0&&program<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(Enumerations.MIDI_CHANNEL_MESSAGES.programchange<<4)+(this.number-1),program],{time:Utilities.toTimestamp(options.time)}),this}sendRpnValue(rpn,data,options={}){if(Array.isArray(rpn)||(rpn=Enumerations.MIDI_REGISTERED_PARAMETERS[rpn]),wm.validation){if(!Number.isInteger(rpn[0])||!Number.isInteger(rpn[1]))throw new TypeError("The specified NRPN is invalid.");if(!(rpn[0]>=0&&rpn[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(rpn[1]>=0&&rpn[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(data).forEach(value=>{if(!(value>=0&&value<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")})}return this._selectRegisteredParameter(rpn,options),this._setCurrentParameter(data,options),this._deselectRegisteredParameter(options),this}sendTuningBank(value,options={}){if(wm.validation&&(!Number.isInteger(value)||!(value>=0&&value<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",value,options),this}sendTuningProgram(value,options={}){if(wm.validation&&(!Number.isInteger(value)||!(value>=0&&value<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",value,options),this}sendLocalControl(state,options={}){return state?this.sendChannelMode("localcontrol",127,options):this.sendChannelMode("localcontrol",0,options)}sendAllNotesOff(options={}){return this.sendChannelMode("allnotesoff",0,options)}sendAllSoundOff(options={}){return this.sendChannelMode("allsoundoff",0,options)}sendResetAllControllers(options={}){return this.sendChannelMode("resetallcontrollers",0,options)}sendPolyphonicMode(mode,options={}){return"mono"===mode?this.sendChannelMode("monomodeon",0,options):this.sendChannelMode("polymodeon",0,options)}get octaveOffset(){return this._octaveOffset}set octaveOffset(value){if(this.validation&&(value=parseInt(value),isNaN(value)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=value}get output(){return this._output}get number(){return this._number}}
/**
     * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
     * A port is made available by a MIDI device. A MIDI device can advertise several input and output
     * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
     * property.
     *
     * The `Output` object is automatically instantiated by the library according to the host's MIDI
     * subsystem and should not be directly instantiated.
     *
     * You can access all available `Output` objects by referring to the
     * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
     * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
     * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
     *
     * @fires Output#opened
     * @fires Output#disconnected
     * @fires Output#closed
     *
     * @extends EventEmitter
     * @license Apache-2.0
     */class Output extends EventEmitter{constructor(midiOutput){super(),this._midiOutput=midiOutput,this._octaveOffset=0,this.channels=[];for(let i=1;i<=16;i++)this.channels[i]=new OutputChannel(this,i);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(ch=>ch.destroy()),this.channels=[],this._midiOutput.onstatechange=null,await this.close(),this._midiOutput=null}_onStateChange(e){let event={timestamp:wm.time};"open"===e.port.connection?(event.type="opened",event.target=this,event.port=event.target,this.emit("opened",event)):"closed"===e.port.connection&&"connected"===e.port.state?(event.type="closed",event.target=this,event.port=event.target,this.emit("closed",event)):"closed"===e.port.connection&&"disconnected"===e.port.state?(event.type="disconnected",event.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",event)):"pending"===e.port.connection&&"disconnected"===e.port.state||console.warn("This statechange event was not caught:",e.port.connection,e.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(err){return Promise.reject(err)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}
/**
       * Sends a MIDI message on the MIDI output port. If no time is specified, the message will be
       * sent immediately. The message should be an array of 8 bit unsigned integers (0-225), a
       * [`Uint8Array`]{@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array}
       * object or a [`Message`](Message) object.
       *
       * It is usually not necessary to use this method directly as you can use one of the simpler
       * helper methods such as [`playNote()`](#playNote), [`stopNote()`](#stopNote),
       * [`sendControlChange()`](#sendControlChange), etc.
       *
       * Details on the format of MIDI messages are available in the summary of
       * [MIDI messages]{@link https://www.midi.org/specifications-old/item/table-1-summary-of-midi-message}
       * from the MIDI Manufacturers Association.
       *
       * @param message {number[]|Uint8Array|Message} An array of 8bit unsigned integers, a `Uint8Array`
       * object (not available in Node.js) containing the message bytes or a `Message` object.
       *
       * @param {object} [options={}]
       *
       * @param {number|string} [options.time=(now)] If `time` is a string prefixed with `"+"` and
       * followed by a number, the message will be delayed by that many milliseconds. If the value is a
       * positive number
       * ([`DOMHighResTimeStamp`]{@link https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp}),
       * the operation will be scheduled for that time. The current time can be retrieved with
       * [`WebMidi.time`]{@link WebMidi#time}. If `options.time` is omitted, or in the past, the
       * operation will be carried out as soon as possible.
       *
       * @throws {RangeError} The first byte (status) must be an integer between 128 and 255.
       *
       * @returns {Output} Returns the `Output` object so methods can be chained.
       *
       * @license Apache-2.0
       */send(message,options={time:0},legacy=0){if(message instanceof Message&&(message=Utilities.isNode?message.data:message.rawData),message instanceof Uint8Array&&Utilities.isNode&&(message=Array.from(message)),wm.validation){if(Array.isArray(message)||message instanceof Uint8Array||(message=[message],Array.isArray(options)&&(message=message.concat(options)),options=isNaN(legacy)?{time:0}:{time:legacy}),!(parseInt(message[0])>=128&&parseInt(message[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");message.slice(1).forEach(value=>{if(!((value=parseInt(value))>=0&&value<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")}),options||(options={time:0})}return this._midiOutput.send(message,Utilities.toTimestamp(options.time)),this}sendSysex(identification,data=[],options={}){if(identification=[].concat(identification),data instanceof Uint8Array){const merged=new Uint8Array(1+identification.length+data.length+1);merged[0]=Enumerations.MIDI_SYSTEM_MESSAGES.sysex,merged.set(Uint8Array.from(identification),1),merged.set(data,1+identification.length),merged[merged.length-1]=Enumerations.MIDI_SYSTEM_MESSAGES.sysexend,this.send(merged,{time:options.time})}else{const merged=identification.concat(data,Enumerations.MIDI_SYSTEM_MESSAGES.sysexend);this.send([Enumerations.MIDI_SYSTEM_MESSAGES.sysex].concat(merged),{time:options.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():wm.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(value,options={}){if(wm.validation&&(value=parseInt(value),isNaN(value)||!(value>=0&&value<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.timecode,value],{time:options.time}),this}sendSongPosition(value=0,options={}){var msb=(value=Math.floor(value)||0)>>7&127,lsb=127&value;return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.songposition,msb,lsb],{time:options.time}),this}sendSongSelect(value=0,options={}){if(wm.validation&&(value=parseInt(value),isNaN(value)||!(value>=0&&value<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.songselect,value],{time:options.time}),this}sendTuneRequest(options={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.tunerequest],{time:options.time}),this}sendClock(options={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.clock],{time:options.time}),this}sendStart(options={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.start],{time:options.time}),this}sendContinue(options={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.continue],{time:options.time}),this}sendStop(options={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.stop],{time:options.time}),this}sendActiveSensing(options={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.activesensing],{time:options.time}),this}sendReset(options={}){return this.send([Enumerations.MIDI_SYSTEM_MESSAGES.reset],{time:options.time}),this}sendTuningRequest(options={}){return wm.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(options)}sendKeyAftertouch(note,pressure,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendKeyAftertouch(note,pressure,options)}),this}sendControlChange(controller,value,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendControlChange(controller,value,options)}),this}sendPitchBendRange(semitones=0,cents=0,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendPitchBendRange(semitones,cents,options)}),this}setPitchBendRange(semitones=0,cents=0,channel="all",options={}){return wm.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(semitones,cents,options)}sendRpnValue(parameter,data,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendRpnValue(parameter,data,options)}),this}setRegisteredParameter(parameter,data=[],channel="all",options={}){return wm.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(parameter,data,options)}sendChannelAftertouch(pressure,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendChannelAftertouch(pressure,options)}),this}sendPitchBend(value,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendPitchBend(value,options)}),this}sendProgramChange(program=0,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendProgramChange(program,options)}),this}sendModulationRange(semitones,cents,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendModulationRange(semitones,cents,options)}),this}setModulationRange(semitones=0,cents=0,channel="all",options={}){return wm.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(semitones,cents,options)}sendMasterTuning(value,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendMasterTuning(value,options)}),this}setMasterTuning(value,channel={},options={}){return wm.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(value,options)}sendTuningProgram(value,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendTuningProgram(value,options)}),this}setTuningProgram(value,channel="all",options={}){return wm.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(value,options)}sendTuningBank(value=0,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendTuningBank(value,options)}),this}setTuningBank(parameter,channel="all",options={}){return wm.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(parameter,options)}sendChannelMode(command,value=0,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendChannelMode(command,value,options)}),this}sendAllSoundOff(options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendAllSoundOff(options)}),this}sendAllNotesOff(options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendAllNotesOff(options)}),this}sendResetAllControllers(options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendResetAllControllers(options)}),this}sendPolyphonicMode(mode,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendPolyphonicMode(mode,options)}),this}sendLocalControl(state,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendLocalControl(state,options)}),this}sendOmniMode(state,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendOmniMode(state,options)}),this}sendNrpnValue(parameter,data,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendNrpnValue(parameter,data,options)}),this}setNonRegisteredParameter(parameter,data=[],channel="all",options={}){return wm.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(parameter,data,options)}sendRpnIncrement(parameter,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendRpnIncrement(parameter,options)}),this}incrementRegisteredParameter(parameter,channel="all",options={}){return wm.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(parameter,options)}sendRpnDecrement(parameter,options={}){return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendRpnDecrement(parameter,options)}),this}decrementRegisteredParameter(parameter,channel="all",options={}){return wm.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),options.channels=channel,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(parameter,options)}sendNoteOff(note,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendNoteOff(note,options)}),this}stopNote(note,options){return this.sendNoteOff(note,options)}playNote(note,options={},legacy={}){if(wm.validation&&(options.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),options.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].playNote(note,options)}),this}sendNoteOn(note,options={},legacy={}){if(wm.validation&&(Array.isArray(options)||Number.isInteger(options)||"all"===options)){const channels=options;(options=legacy).channels=channels,"all"===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS)}return null==options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].sendNoteOn(note,options)}),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(value){if(this.validation&&(value=parseInt(value),isNaN(value)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=value}}
/**
     * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
     * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
     * to all the outputs listed in its [`destinations`](#destinations) property.
     *
     * If specific channels or message types have been defined in the [`channels`](#channels) or
     * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
     *
     * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
     * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
     *
     * @license Apache-2.0
     * @since 3.0.0
     */class Forwarder{constructor(destinations=[],options={}){this.destinations=[],this.types=[...Object.keys(Enumerations.MIDI_SYSTEM_MESSAGES),...Object.keys(Enumerations.MIDI_CHANNEL_MESSAGES)],this.channels=Enumerations.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(destinations)||(destinations=[destinations]),options.types&&!Array.isArray(options.types)&&(options.types=[options.types]),options.channels&&!Array.isArray(options.channels)&&(options.channels=[options.channels]),wm.validation&&(destinations.forEach(destination=>{if(!(destination instanceof Output))throw new TypeError("Destinations must be of type 'Output'.")}),void 0!==options.types&&options.types.forEach(type=>{if(!Enumerations.MIDI_SYSTEM_MESSAGES.hasOwnProperty(type)&&!Enumerations.MIDI_CHANNEL_MESSAGES.hasOwnProperty(type))throw new TypeError("Type must be a valid message type.")}),void 0!==options.channels&&options.channels.forEach(channel=>{if(!Enumerations.MIDI_CHANNEL_NUMBERS.includes(channel))throw new TypeError("MIDI channel must be between 1 and 16.")})),this.destinations=destinations,options.types&&(this.types=options.types),options.channels&&(this.channels=options.channels)}forward(message){this.suspended||this.types.includes(message.type)&&(message.channel&&!this.channels.includes(message.channel)||this.destinations.forEach(destination=>{(!wm.validation||destination instanceof Output)&&destination.send(message)}))}}
/**
     * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
     * device. This object is derived from the host's MIDI subsystem and should not be instantiated
     * directly.
     *
     * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
     * property.
     *
     * @fires InputChannel#midimessage
     * @fires InputChannel#unknownmessage
     *
     * @fires InputChannel#noteoff
     * @fires InputChannel#noteon
     * @fires InputChannel#keyaftertouch
     * @fires InputChannel#programchange
     * @fires InputChannel#event:controlchange-controllerxxx
     * @fires InputChannel#channelaftertouch
     * @fires InputChannel#pitchbend
     * @fires InputChannel#controlchange
     *
     * @fires InputChannel#allnotesoff
     * @fires InputChannel#allsoundoff
     * @fires InputChannel#localcontrol
     * @fires InputChannel#monomode
     * @fires InputChannel#omnimode
     * @fires InputChannel#resetallcontrollers
     *
     * @fires InputChannel#event:nrpn
     * @fires InputChannel#event:nrpn-dataentrycoarse
     * @fires InputChannel#event:nrpn-dataentryfine
     * @fires InputChannel#event:nrpn-databuttonincrement
     * @fires InputChannel#event:nrpn-databuttondecrement
     * @fires InputChannel#event:rpn
     * @fires InputChannel#event:rpn-dataentrycoarse
     * @fires InputChannel#event:rpn-dataentryfine
     * @fires InputChannel#event:rpn-databuttonincrement
     * @fires InputChannel#event:rpn-databuttondecrement
     *
     * @extends EventEmitter
     * @license Apache-2.0
     * @since 3.0.0
     */class InputChannel extends EventEmitter{constructor(input,number){super(),this._input=input,this._number=number,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(e){const event=Object.assign({},e);event.port=this.input,event.target=this,event.type="midimessage",this.emit(event.type,event),this._parseEventForStandardMessages(event)}_parseEventForStandardMessages(e){const event=Object.assign({},e);event.type=event.message.type||"unknownmessage";const data1=e.message.dataBytes[0],data2=e.message.dataBytes[1];if("noteoff"===event.type||"noteon"===event.type&&0===data2)this.notesState[data1]=!1,event.type="noteoff",event.note=new Note(Utilities.offsetNumber(data1,this.octaveOffset+this.input.octaveOffset+wm.octaveOffset),{rawAttack:0,rawRelease:data2}),event.value=Utilities.from7bitToFloat(data2),event.rawValue=data2,event.velocity=event.note.release,event.rawVelocity=event.note.rawRelease;else if("noteon"===event.type)this.notesState[data1]=!0,event.note=new Note(Utilities.offsetNumber(data1,this.octaveOffset+this.input.octaveOffset+wm.octaveOffset),{rawAttack:data2}),event.value=Utilities.from7bitToFloat(data2),event.rawValue=data2,event.velocity=event.note.attack,event.rawVelocity=event.note.rawAttack;else if("keyaftertouch"===event.type)event.note=new Note(Utilities.offsetNumber(data1,this.octaveOffset+this.input.octaveOffset+wm.octaveOffset)),event.value=Utilities.from7bitToFloat(data2),event.rawValue=data2,event.identifier=event.note.identifier,event.key=event.note.number,event.rawKey=data1;else if("controlchange"===event.type){event.controller={number:data1,name:Utilities.getCcNameByNumber(data1)},event.subtype=event.controller.name||"controller"+data1,event.value=Utilities.from7bitToFloat(data2),event.rawValue=data2;const specificEvent=Object.assign({},event);specificEvent.type=`${event.type}-controller`,delete specificEvent.subtype,this.emit(specificEvent.type,specificEvent),event.message.dataBytes[0]>=120&&this._parseChannelModeMessage(event),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(event.message.dataBytes[0])&&this._parseEventForParameterNumber(event)}else"programchange"===event.type?(event.value=data1,event.rawValue=event.value):"channelaftertouch"===event.type?(event.value=Utilities.from7bitToFloat(data1),event.rawValue=data1):"pitchbend"===event.type?(event.value=((data2<<7)+data1-8192)/8192,event.rawValue=(data2<<7)+data1):event.type="unknownmessage";this.emit(event.type,event)}_parseChannelModeMessage(e){const event=Object.assign({},e);event.type=event.controller.name,"localcontrol"===event.type&&(event.value=127===event.message.data[2],event.rawValue=event.message.data[2]),"omnimodeon"===event.type?(event.type="omnimode",event.value=!0,event.rawValue=event.message.data[2]):"omnimodeoff"===event.type&&(event.type="omnimode",event.value=!1,event.rawValue=event.message.data[2]),"monomodeon"===event.type?(event.type="monomode",event.value=!0,event.rawValue=event.message.data[2]):"polymodeon"===event.type&&(event.type="monomode",event.value=!1,event.rawValue=event.message.data[2]),this.emit(event.type,event)}_parseEventForParameterNumber(event){const controller=event.message.dataBytes[0],value=event.message.dataBytes[1],list=Enumerations.MIDI_CONTROL_CHANGE_MESSAGES;controller===list.nonregisteredparameterfine||controller===list.registeredparameterfine?(this._nrpnBuffer=[],this._rpnBuffer=[],controller===list.nonregisteredparameterfine?this._nrpnBuffer=[event.message]:127!==value&&(this._rpnBuffer=[event.message])):controller===list.nonregisteredparametercoarse||controller===list.registeredparametercoarse?controller===list.nonregisteredparametercoarse?(this._rpnBuffer=[],1===this._nrpnBuffer.length?this._nrpnBuffer.push(event.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],1===this._rpnBuffer.length&&127!==value?this._rpnBuffer.push(event.message):this._rpnBuffer=[]):controller!==list.dataentrycoarse&&controller!==list.dataentryfine&&controller!==list.databuttonincrement&&controller!==list.databuttondecrement||(2===this._rpnBuffer.length?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],event):2===this._nrpnBuffer.length?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],event):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(controller){return controller===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.dataentrycoarse||controller===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.dataentryfine||controller===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.databuttonincrement||controller===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.databuttondecrement||controller===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparametercoarse||controller===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparameterfine||controller===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.registeredparametercoarse||controller===Enumerations.MIDI_CONTROL_CHANGE_MESSAGES.registeredparameterfine}_dispatchParameterNumberEvent(type,paramMsb,paramLsb,e){type="nrpn"===type?"nrpn":"rpn";const event={target:e.target,timestamp:e.timestamp,message:e.message,parameterMsb:paramMsb,parameterLsb:paramLsb,value:Utilities.from7bitToFloat(e.message.dataBytes[1]),rawValue:e.message.dataBytes[1]};event.parameter="rpn"===type?Object.keys(Enumerations.MIDI_REGISTERED_PARAMETERS).find(key=>Enumerations.MIDI_REGISTERED_PARAMETERS[key][0]===paramMsb&&Enumerations.MIDI_REGISTERED_PARAMETERS[key][1]===paramLsb):(paramMsb<<7)+paramLsb;const subtype=Utilities.getPropertyByValue(Enumerations.MIDI_CONTROL_CHANGE_MESSAGES,e.message.dataBytes[0]);event.type=`-`,this.emit(event.type,event),event.type=type,event.subtype=subtype,this.emit(event.type,event)}getChannelModeByNumber(number){return wm.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),number=Math.floor(number)),Utilities.getChannelModeByNumber(number)}getCcNameByNumber(number){if(wm.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),!((number=parseInt(number))>=0&&number<=127)))throw new RangeError("Invalid control change number.");return Utilities.getCcNameByNumber(number)}getNoteState(note){note instanceof Note&&(note=note.identifier);const number=Utilities.guessNoteNumber(note,wm.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[number]}get octaveOffset(){return this._octaveOffset}set octaveOffset(value){if(this.validation&&(value=parseInt(value),isNaN(value)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=value}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(value){this.validation&&(value=!!value),this.parameterNumberEventsEnabled=value}}
/**
     * The `Message` class represents a single MIDI message. It has several properties that make it
     * easy to make sense of the binary data it contains.
     *
     * @license Apache-2.0
     * @since 3.0.0
     */class Message{constructor(data){this.rawData=data,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=1+(15&this.statusByte)):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=Utilities.getPropertyByValue(Enumerations.MIDI_CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=Utilities.getPropertyByValue(Enumerations.MIDI_SYSTEM_MESSAGES,this.command)),this.statusByte===Enumerations.MIDI_SYSTEM_MESSAGES.sysex&&(0===this.dataBytes[0]?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}
/**
     * The `Input` class represents a single MIDI input port. This object is automatically instantiated
     * by the library according to the host's MIDI subsystem and does not need to be directly
     * instantiated. Instead, you can access all `Input` objects by referring to the
     * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
     * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
     * [`WebMidi.getInputById()`](WebMidi#getInputById).
     *
     * Note that a single MIDI device may expose several inputs and/or outputs.
     *
     * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
     * (such as [`noteon`](InputChannel#event:noteon) or
     * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
     * object does that. However, you can still use the
     * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
     * [`InputChannel`](InputChannel) objects at once.
     *
     * @fires Input#opened
     * @fires Input#disconnected
     * @fires Input#closed
     * @fires Input#midimessage
     *
     * @fires Input#sysex
     * @fires Input#timecode
     * @fires Input#songposition
     * @fires Input#songselect
     * @fires Input#tunerequest
     * @fires Input#clock
     * @fires Input#start
     * @fires Input#continue
     * @fires Input#stop
     * @fires Input#activesensing
     * @fires Input#reset
     *
     * @fires Input#unknownmidimessage
     *
     * @extends EventEmitter
     * @license Apache-2.0
     */class Input extends EventEmitter{constructor(midiInput){super(),this._midiInput=midiInput,this._octaveOffset=0,this.channels=[];for(let i=1;i<=16;i++)this.channels[i]=new InputChannel(this,i);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(ch=>ch.destroy()),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(e){let event={timestamp:wm.time,target:this,port:this};"open"===e.port.connection?(event.type="opened",this.emit("opened",event)):"closed"===e.port.connection&&"connected"===e.port.state?(event.type="closed",this.emit("closed",event)):"closed"===e.port.connection&&"disconnected"===e.port.state?(event.type="disconnected",event.port={connection:e.port.connection,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name,state:e.port.state,type:e.port.type},this.emit("disconnected",event)):"pending"===e.port.connection&&"disconnected"===e.port.state||console.warn("This statechange event was not caught: ",e.port.connection,e.port.state)}_onMidiMessage(e){const message=new Message(e.data),event={port:this,target:this,message:message,timestamp:e.timeStamp,type:"midimessage",data:message.data,rawData:message.data,statusByte:message.data[0],dataBytes:message.dataBytes};this.emit("midimessage",event),message.isSystemMessage?this._parseEvent(event):message.isChannelMessage&&this.channels[message.channel]._processMidiMessageEvent(event),this._forwarders.forEach(forwarder=>forwarder.forward(message))}_parseEvent(e){const event=Object.assign({},e);event.type=event.message.type||"unknownmidimessage","songselect"===event.type&&(event.song=e.data[1]+1,event.value=e.data[1],event.rawValue=event.value),this.emit(event.type,event)}async open(){try{await this._midiInput.open()}catch(err){return Promise.reject(err)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(err){return Promise.reject(err)}return Promise.resolve(this)}getChannelModeByNumber(){wm.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(event,listener,options={}){if(wm.validation&&"function"==typeof options){let channels=null!=listener?[].concat(listener):void 0;listener=options,options={channels:channels}}if(Enumerations.CHANNEL_EVENTS.includes(event)){void 0===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS);let listeners=[];return Utilities.sanitizeChannels(options.channels).forEach(ch=>{listeners.push(this.channels[ch].addListener(event,listener,options))}),listeners}return super.addListener(event,listener,options)}addOneTimeListener(event,listener,options={}){return options.remaining=1,this.addListener(event,listener,options)}on(event,channel,listener,options){return this.addListener(event,channel,listener,options)}hasListener(event,listener,options={}){if(wm.validation&&"function"==typeof options){let channels=[].concat(listener);listener=options,options={channels:channels}}return Enumerations.CHANNEL_EVENTS.includes(event)?(void 0===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),Utilities.sanitizeChannels(options.channels).every(ch=>this.channels[ch].hasListener(event,listener))):super.hasListener(event,listener)}removeListener(event,listener,options={}){if(wm.validation&&"function"==typeof options){let channels=[].concat(listener);listener=options,options={channels:channels}}if(void 0===options.channels&&(options.channels=Enumerations.MIDI_CHANNEL_NUMBERS),null==event)return Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch]&&this.channels[ch].removeListener()}),super.removeListener();Enumerations.CHANNEL_EVENTS.includes(event)?Utilities.sanitizeChannels(options.channels).forEach(ch=>{this.channels[ch].removeListener(event,listener,options)}):super.removeListener(event,listener,options)}addForwarder(output,options={}){let forwarder;return forwarder=output instanceof Forwarder?output:new Forwarder(output,options),this._forwarders.push(forwarder),forwarder}removeForwarder(forwarder){this._forwarders=this._forwarders.filter(item=>item!==forwarder)}hasForwarder(forwarder){return this._forwarders.includes(forwarder)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(value){if(this.validation&&(value=parseInt(value),isNaN(value)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=value}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return wm.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}
/**
     * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
     * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
     *
     * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
     * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
     * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
     * module) version, you get an already-instantiated object when you import the module.
     *
     * @fires WebMidi#connected
     * @fires WebMidi#disabled
     * @fires WebMidi#disconnected
     * @fires WebMidi#enabled
     * @fires WebMidi#error
     * @fires WebMidi#midiaccessgranted
     * @fires WebMidi#portschanged
     *
     * @extends EventEmitter
     * @license Apache-2.0
     */class WebMidi extends EventEmitter{constructor(){super(),this.defaults={note:{attack:Utilities.from7bitToFloat(64),release:Utilities.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(options={},legacy=!1){if(this.validation=!1!==options.validation,this.validation&&("function"==typeof options&&(options={callback:options,sysex:legacy}),legacy&&(options.sysex=!0)),this.enabled)return"function"==typeof options.callback&&options.callback(),Promise.resolve();const errorEvent={timestamp:this.time,target:this,type:"error",error:void 0},midiAccessGrantedEvent={timestamp:this.time,target:this,type:"midiaccessgranted"},enabledEvent={timestamp:this.time,target:this,type:"enabled"};try{"function"==typeof options.requestMIDIAccessFunction?this.interface=await options.requestMIDIAccessFunction({sysex:options.sysex,software:options.software}):this.interface=await navigator.requestMIDIAccess({sysex:options.sysex,software:options.software})}catch(err){return errorEvent.error=err,this.emit("error",errorEvent),"function"==typeof options.callback&&options.callback(err),Promise.reject(err)}this.emit("midiaccessgranted",midiAccessGrantedEvent),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(err){return errorEvent.error=err,this.emit("error",errorEvent),"function"==typeof options.callback&&options.callback(err),Promise.reject(err)}return this.emit("enabled",enabledEvent),"function"==typeof options.callback&&options.callback(),Promise.resolve(this)}async disable(){return this._destroyInputsAndOutputs().then(()=>{navigator&&"function"==typeof navigator.close&&navigator.close(),this.interface&&(this.interface.onstatechange=void 0),this.interface=null;let event={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",event),this.removeListener()})}getInputById(id,options={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!id)return}if(options.disconnected){for(let i=0;i<this._disconnectedInputs.length;i++)if(this._disconnectedInputs[i].id===id.toString())return this._disconnectedInputs[i]}else for(let i=0;i<this.inputs.length;i++)if(this.inputs[i].id===id.toString())return this.inputs[i]}getInputByName(name,options={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!name)return;name=name.toString()}if(options.disconnected){for(let i=0;i<this._disconnectedInputs.length;i++)if(~this._disconnectedInputs[i].name.indexOf(name))return this._disconnectedInputs[i]}else for(let i=0;i<this.inputs.length;i++)if(~this.inputs[i].name.indexOf(name))return this.inputs[i]}getOutputByName(name,options={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!name)return;name=name.toString()}if(options.disconnected){for(let i=0;i<this._disconnectedOutputs.length;i++)if(~this._disconnectedOutputs[i].name.indexOf(name))return this._disconnectedOutputs[i]}else for(let i=0;i<this.outputs.length;i++)if(~this.outputs[i].name.indexOf(name))return this.outputs[i]}getOutputById(id,options={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!id)return}if(options.disconnected){for(let i=0;i<this._disconnectedOutputs.length;i++)if(this._disconnectedOutputs[i].id===id.toString())return this._disconnectedOutputs[i]}else for(let i=0;i<this.outputs.length;i++)if(this.outputs[i].id===id.toString())return this.outputs[i]}noteNameToNumber(name){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),Utilities.toNoteNumber(name,this.octaveOffset)}getOctave(number){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),number=parseInt(number)),!isNaN(number)&&number>=0&&number<=127&&Utilities.getNoteDetails(Utilities.offsetNumber(number,this.octaveOffset)).octave}sanitizeChannels(channel){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),Utilities.sanitizeChannels(channel)}toMIDIChannels(channel){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),Utilities.sanitizeChannels(channel)}guessNoteNumber(input){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),Utilities.guessNoteNumber(input,this.octaveOffset)}getValidNoteArray(notes,options={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),Utilities.buildNoteArray(notes,options)}convertToTimestamp(time){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),Utilities.toTimestamp(time)}async _destroyInputsAndOutputs(){let promises=[];return this.inputs.forEach(input=>promises.push(input.destroy())),this.outputs.forEach(output=>promises.push(output.destroy())),Promise.all(promises).then(()=>{this._inputs=[],this._outputs=[]})}_onInterfaceStateChange(e){this._updateInputsAndOutputs();let event={timestamp:e.timeStamp,type:e.port.state,target:this};if("connected"===e.port.state&&"open"===e.port.connection){"output"===e.port.type?event.port=this.getOutputById(e.port.id):"input"===e.port.type&&(event.port=this.getInputById(e.port.id)),this.emit(e.port.state,event);const portsChangedEvent=Object.assign({},event);portsChangedEvent.type="portschanged",this.emit(portsChangedEvent.type,portsChangedEvent)}else if("disconnected"===e.port.state&&"pending"===e.port.connection){"input"===e.port.type?event.port=this.getInputById(e.port.id,{disconnected:!0}):"output"===e.port.type&&(event.port=this.getOutputById(e.port.id,{disconnected:!0})),this.emit(e.port.state,event);const portsChangedEvent=Object.assign({},event);portsChangedEvent.type="portschanged",this.emit(portsChangedEvent.type,portsChangedEvent)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let i=this._inputs.length-1;i>=0;i--){const current=this._inputs[i],inputs=Array.from(this.interface.inputs.values());inputs.find(input=>input===current._midiInput)||(this._disconnectedInputs.push(current),this._inputs.splice(i,1))}let promises=[];return this.interface.inputs.forEach(nInput=>{if(!this._inputs.find(input=>input._midiInput===nInput)){let input=this._disconnectedInputs.find(input=>input._midiInput===nInput);input||(input=new Input(nInput)),this._inputs.push(input),promises.push(input.open())}}),Promise.all(promises)}async _updateOutputs(){if(!this.interface)return;for(let i=this._outputs.length-1;i>=0;i--){const current=this._outputs[i],outputs=Array.from(this.interface.outputs.values());outputs.find(output=>output===current._midiOutput)||(this._disconnectedOutputs.push(current),this._outputs.splice(i,1))}let promises=[];return this.interface.outputs.forEach(nOutput=>{if(!this._outputs.find(output=>output._midiOutput===nOutput)){let output=this._disconnectedOutputs.find(output=>output._midiOutput===nOutput);output||(output=new Output(nOutput)),this._outputs.push(output),promises.push(output.open())}}),Promise.all(promises)}get enabled(){return null!==this.interface}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),Utilities.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),Utilities.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(value){if(this.validation&&(value=parseInt(value),isNaN(value)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=value}get outputs(){return this._outputs}get supported(){return"undefined"!=typeof navigator&&navigator.requestMIDIAccess}get sysexEnabled(){return!(!this.interface||!this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.0.25"}get flavour(){return"iife"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),Enumerations.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.MIDI_SYSTEM_MESSAGES."),Enumerations.MIDI_SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.MIDI_CHANNEL_MODE_MESSAGES."),Enumerations.MIDI_CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been moved to Enumerations.MIDI_CONTROL_CHANGE_MESSAGES."),Enumerations.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.MIDI_REGISTERED_PARAMETERS."),this.MIDI_REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}}const wm=new WebMidi;wm.constructor=null,exports.Enumerations=Enumerations,exports.Forwarder=Forwarder,exports.Input=Input,exports.InputChannel=InputChannel,exports.Message=Message,exports.Note=Note,exports.Output=Output,exports.OutputChannel=OutputChannel,exports.Utilities=Utilities,exports.WebMidi=wm}(this.window=this.window||{});